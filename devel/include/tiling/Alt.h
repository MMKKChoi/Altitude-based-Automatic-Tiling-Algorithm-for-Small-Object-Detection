// Generated by gencpp from file tiling/Alt.msg
// DO NOT EDIT!


#ifndef TILING_MESSAGE_ALT_H
#define TILING_MESSAGE_ALT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tiling
{
template <class ContainerAllocator>
struct Alt_
{
  typedef Alt_<ContainerAllocator> Type;

  Alt_()
    : alt(0)  {
    }
  Alt_(const ContainerAllocator& _alloc)
    : alt(0)  {
  (void)_alloc;
    }



   typedef int32_t _alt_type;
  _alt_type alt;





  typedef boost::shared_ptr< ::tiling::Alt_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiling::Alt_<ContainerAllocator> const> ConstPtr;

}; // struct Alt_

typedef ::tiling::Alt_<std::allocator<void> > Alt;

typedef boost::shared_ptr< ::tiling::Alt > AltPtr;
typedef boost::shared_ptr< ::tiling::Alt const> AltConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiling::Alt_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiling::Alt_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tiling::Alt_<ContainerAllocator1> & lhs, const ::tiling::Alt_<ContainerAllocator2> & rhs)
{
  return lhs.alt == rhs.alt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tiling::Alt_<ContainerAllocator1> & lhs, const ::tiling::Alt_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tiling

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tiling::Alt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiling::Alt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiling::Alt_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiling::Alt_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiling::Alt_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiling::Alt_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiling::Alt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "59c4254ca6636d694bc3e5b3b9a6b8c7";
  }

  static const char* value(const ::tiling::Alt_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x59c4254ca6636d69ULL;
  static const uint64_t static_value2 = 0x4bc3e5b3b9a6b8c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiling::Alt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiling/Alt";
  }

  static const char* value(const ::tiling::Alt_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiling::Alt_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Alt.msg\n"
"int32 alt\n"
;
  }

  static const char* value(const ::tiling::Alt_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiling::Alt_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.alt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Alt_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiling::Alt_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiling::Alt_<ContainerAllocator>& v)
  {
    s << indent << "alt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.alt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TILING_MESSAGE_ALT_H
